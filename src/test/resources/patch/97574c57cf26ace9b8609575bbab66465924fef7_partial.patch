From 97574c57cf26ace9b8609575bbab66465924fef7 Mon Sep 17 00:00:00 2001
From: ebotcazou <ebotcazou@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Fri, 28 Oct 2016 21:04:51 +0000
Subject: [PATCH] 	* target.def (min_arithmetic_precision): New hook. 
 * doc/tm.texi.in (Misc): Add TARGET_MIN_ARITHMETIC_PRECISION. 	* doc/tm.texi:
 Regenerate. 	* internal-fn.c (expand_arith_overflow): Adjust handling of
 target 	dependent support by means of TARGET_MIN_ARITHMETIC_PRECISION.
 	* targhooks.c (default_min_arithmetic_precision): New function. 
 * targhooks.h (default_min_arithmetic_precision): Declare. 	*
 config/sparc/sparc.c (TARGET_MIN_ARITHMETIC_PRECISION): Define. 
 (sparc_min_arithmetic_precision): New function.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/trunk@241665 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/ChangeLog                               | 21 ++++++++++----
 gcc/config/sparc/sparc.c                    | 12 ++++++++
 gcc/doc/tm.texi                             | 17 +++++++++++
 gcc/doc/tm.texi.in                          |  2 ++
 gcc/internal-fn.c                           | 13 ++++-----
 gcc/target.def                              | 18 ++++++++++++
 gcc/targhooks.c                             |  8 ++++++
 gcc/targhooks.h                             |  2 +-
 gcc/testsuite/ChangeLog                     |  6 ++++
 gcc/testsuite/gcc.target/sparc/overflow-3.c | 15 +++++-----
 gcc/testsuite/gcc.target/sparc/overflow-4.c | 44 +++++++++++++++++++++++++++++
 gcc/testsuite/gcc.target/sparc/overflow-5.c | 43 ++++++++++++++++++++++++++++
 12 files changed, 180 insertions(+), 21 deletions(-)
 create mode 100644 gcc/testsuite/gcc.target/sparc/overflow-4.c
 create mode 100644 gcc/testsuite/gcc.target/sparc/overflow-5.c

diff --git a/gcc/ChangeLog b/gcc/ChangeLog
index 32f6435..3687ecd 100644
--- a/gcc/ChangeLog
+++ b/gcc/ChangeLog
@@ -1,3 +1,15 @@
+2016-10-28  Eric Botcazou  <ebotcazou@adacore.com>
+
+	* target.def (min_arithmetic_precision): New hook.
+	* doc/tm.texi.in (Misc): Add TARGET_MIN_ARITHMETIC_PRECISION.
+	* doc/tm.texi: Regenerate.
+	* internal-fn.c (expand_arith_overflow): Adjust handling of target
+	dependent support by means of TARGET_MIN_ARITHMETIC_PRECISION.
+	* targhooks.c (default_min_arithmetic_precision): New function.
+	* targhooks.h (default_min_arithmetic_precision): Declare.
+	* config/sparc/sparc.c (TARGET_MIN_ARITHMETIC_PRECISION): Define.
+	(sparc_min_arithmetic_precision): New function.
+
 2016-10-28  Segher Boessenkool  <segher@kernel.crashing.org>
 
 	PR target/71847
@@ -13,7 +25,7 @@
 
 	PR tree-optimization/43721
 	* target.def: New hook expand_divmod_libfunc.
-	* doc/tm.texi.in: Add hook for TARGET_EXPAND_DIVMOD_LIBFUNC
+	* doc/tm.texi.in: Add hook for TARGET_EXPAND_DIVMOD_LIBFUNC.
 	* doc/tm.texi: Regenerate.
 	* internal-fn.def: Add new entry for DIVMOD ifn.
 	* internal-fn.c (expand_DIVMOD): New.
@@ -23,10 +35,9 @@
 	(target_supports_divmod_p): New.
 	(divmod_candidate_p): Likewise.
 	(convert_to_divmod): Likewise.
-	(pass_optimize_widening_mul::execute): Call
-	calculate_dominance_info(), renumber_gimple_stmt_uids() at
-	beginning of function. Call convert_to_divmod()
-	and record stats for divmod.
+	(pass_optimize_widening_mul::execute): Call calculate_dominance_info,
+	renumber_gimple_stmt_uids at beginning of function. Call
+	convert_to_divmod and record stats for divmod.
 	* config/arm/arm.c (arm_expand_divmod_libfunc): Override hook
 	TARGET_EXPAND_DIVMOD_LIBFUNC.
 	* doc/sourcebuild.texi: Add items for arm_divmod_simode, divmod,
diff --git a/gcc/config/sparc/sparc.c b/gcc/config/sparc/sparc.c
index c5638cc..2d1f598 100644
--- a/gcc/config/sparc/sparc.c
+++ b/gcc/config/sparc/sparc.c
@@ -648,6 +648,7 @@ static reg_class_t sparc_secondary_reload (bool, rtx, reg_class_t,
 static machine_mode sparc_cstore_mode (enum insn_code icode);
 static void sparc_atomic_assign_expand_fenv (tree *, tree *, tree *);
 static bool sparc_fixed_condition_code_regs (unsigned int *, unsigned int *);
+static unsigned int sparc_min_arithmetic_precision (void);
 
 #ifdef SUBTARGET_ATTRIBUTE_TABLE
 /* Table of valid machine attributes.  */
@@ -866,6 +867,9 @@ char sparc_hard_reg_printed[8];
 #undef TARGET_FIXED_CONDITION_CODE_REGS
 #define TARGET_FIXED_CONDITION_CODE_REGS sparc_fixed_condition_code_regs
 
+#undef TARGET_MIN_ARITHMETIC_PRECISION
+#define TARGET_MIN_ARITHMETIC_PRECISION sparc_min_arithmetic_precision
+
 #undef TARGET_CUSTOM_FUNCTION_DESCRIPTORS
 #define TARGET_CUSTOM_FUNCTION_DESCRIPTORS 1
 
@@ -2749,6 +2753,14 @@ sparc_fixed_condition_code_regs (unsigned int *p1, unsigned int *p2)
   return true;
 }
 
+/* Implement TARGET_MIN_ARITHMETIC_PRECISION.  */
+
+static unsigned int
+sparc_min_arithmetic_precision (void)
+{
+  return 32;
+}
+
 /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,
    return the mode to be used for the comparison.  For floating-point,
    CCFP[E]mode is used.  CCNZmode should be used when the first operand
